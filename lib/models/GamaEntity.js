"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const class_validator_1 = require("class-validator");
const _ = require("lodash");
const GamaHttpStatusCode_1 = require("../config/GamaHttpStatusCode");
const LibsExceptions_1 = require("../models/LibsExceptions");
class GamaEntity {
    getGamaEntityDbName() {
        return this.gamaEntityDbName;
    }
    setGamaEntityDbName(name) {
        this.gamaEntityDbName = name;
    }
    getGamaEntitytableName() {
        return this.gamaEntitytableName;
    }
    setGamaEntitytableName(name) {
        this.gamaEntitytableName = name;
    }
    /**
     * Creates an instance of GamaEntity.
     * @param {*} [source] 自動對應k-v,
     * @param {boolean} [isVaild] 盡量不要在這裡同步驗證,使用非同步vaild驗證比較好(才不會阻塞event loop線程)
     * @memberof GamaEntity
     */
    constructor(source, isVaild) {
        if (source) {
            const properties = this.getList();
            properties.forEach((property) => {
                if (!_.isUndefined(source[property])) {
                    this[property] = source[property];
                }
            });
            if (isVaild) {
                this.validateSync();
            }
        }
    }
    listAllProperties() {
        return this.getList();
    }
    toJSON() {
        const properties = this.listAllProperties();
        const dataObject = {};
        properties.forEach((property) => {
            if ((this)[property] !== undefined) {
                dataObject[property] = (this)[property];
            }
        });
        return dataObject;
    }
    fields() {
        return this.listAllProperties();
    }
    async vaild() {
        const errorsP = class_validator_1.validate(this, { skipMissingProperties: true });
        const errors = await errorsP;
        if (errors.length > 0) {
            const messages = [];
            errors.forEach((err) => {
                messages.push(_.trimStart(err.property, '_'));
            });
            throw new LibsExceptions_1.LibsExceptions(GamaHttpStatusCode_1.GamaHttpStatusCode.STATUS_FAIL, this.constructor.name + ' : data format error, field: ' + _.toString(messages));
        }
    }
    validateSync() {
        const errors = class_validator_1.validateSync(this, { skipMissingProperties: true });
        if (errors.length > 0) {
            const messages = [];
            errors.forEach((err) => {
                messages.push(_.trimStart(err.property, '_'));
            });
            throw new LibsExceptions_1.LibsExceptions(GamaHttpStatusCode_1.GamaHttpStatusCode.STATUS_FAIL, this.constructor.name + ' : data format error, field: ' + _.toString(messages));
        }
    }
}
exports.default = GamaEntity;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtYUVudGl0eS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZ2d0dG9vNDQvRGVza3RvcC9iYXNlQVBJL3NyYy8iLCJzb3VyY2VzIjpbIm1vZGVscy9HYW1hRW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEscURBQXlEO0FBQ3pELDRCQUE0QjtBQUU1QixxRUFBa0U7QUFDbEUsNkRBQTBEO0FBRTFEO0lBTVcsbUJBQW1CO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDO0lBQ2pDLENBQUM7SUFFUyxtQkFBbUIsQ0FBQyxJQUFZO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFDakMsQ0FBQztJQUVNLHNCQUFzQjtRQUN6QixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztJQUNwQyxDQUFDO0lBRVMsc0JBQXNCLENBQUMsSUFBWTtRQUN6QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDO0lBQ3BDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFlBQVksTUFBWSxFQUFFLE9BQWlCO1FBQ3ZDLElBQUksTUFBTSxFQUFFO1lBQ1IsTUFBTSxVQUFVLEdBQWEsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUU7b0JBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQ3JDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLE9BQU8sRUFBRTtnQkFDVCxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDdkI7U0FDSjtJQUNMLENBQUM7SUFFTyxpQkFBaUI7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLE1BQU07UUFDVCxNQUFNLFVBQVUsR0FBYSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN0RCxNQUFNLFVBQVUsR0FBUSxFQUFFLENBQUM7UUFDM0IsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ2hDLFVBQVUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzNDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRU0sTUFBTTtRQUNULE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLO1FBQ2QsTUFBTSxPQUFPLEdBQUcsMEJBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sTUFBTSxHQUFHLE1BQU0sT0FBTyxDQUFDO1FBQzdCLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkIsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDbkIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sSUFBSSwrQkFBYyxDQUFDLHVDQUFrQixDQUFDLFdBQVcsRUFDbkQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsK0JBQStCLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO0lBQ0wsQ0FBQztJQUVPLFlBQVk7UUFDaEIsTUFBTSxNQUFNLEdBQUcsOEJBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ25FLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDbkIsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtnQkFDbkIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNsRCxDQUFDLENBQUMsQ0FBQztZQUNILE1BQU0sSUFBSSwrQkFBYyxDQUFDLHVDQUFrQixDQUFDLFdBQVcsRUFDbkQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsK0JBQStCLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ3ZGO0lBQ0wsQ0FBQztDQUNKO0FBckZELDZCQXFGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZhbGlkYXRlLCB2YWxpZGF0ZVN5bmMgfSBmcm9tICdjbGFzcy12YWxpZGF0b3InO1xuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBHYW1hSHR0cFN0YXR1c0NvZGUgfSBmcm9tICcuLi9jb25maWcvR2FtYUh0dHBTdGF0dXNDb2RlJztcbmltcG9ydCB7IExpYnNFeGNlcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL0xpYnNFeGNlcHRpb25zJztcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgR2FtYUVudGl0eSB7XG5cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZ2V0TGlzdCgpOiBzdHJpbmdbXTtcbiAgICBwcml2YXRlIGdhbWFFbnRpdHlEYk5hbWU6IHN0cmluZztcbiAgICBwcml2YXRlIGdhbWFFbnRpdHl0YWJsZU5hbWU6IHN0cmluZztcblxuICAgIHB1YmxpYyBnZXRHYW1hRW50aXR5RGJOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1hRW50aXR5RGJOYW1lO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRHYW1hRW50aXR5RGJOYW1lKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmdhbWFFbnRpdHlEYk5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRHYW1hRW50aXR5dGFibGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1hRW50aXR5dGFibGVOYW1lO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzZXRHYW1hRW50aXR5dGFibGVOYW1lKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLmdhbWFFbnRpdHl0YWJsZU5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgR2FtYUVudGl0eS5cbiAgICAgKiBAcGFyYW0geyp9IFtzb3VyY2VdIOiHquWLleWwjeaHiWstdixcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1ZhaWxkXSDnm6Hph4/kuI3opoHlnKjpgJnoo6HlkIzmraXpqZforYks5L2/55So6Z2e5ZCM5q2ldmFpbGTpqZforYnmr5TovIPlpb0o5omN5LiN5pyD6Zi75aGeZXZlbnQgbG9vcOe3mueoiylcbiAgICAgKiBAbWVtYmVyb2YgR2FtYUVudGl0eVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZT86IGFueSwgaXNWYWlsZD86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllczogc3RyaW5nW10gPSB0aGlzLmdldExpc3QoKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuZm9yRWFjaCgocHJvcGVydHkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoc291cmNlW3Byb3BlcnR5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1twcm9wZXJ0eV0gPSBzb3VyY2VbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGlzVmFpbGQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlU3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsaXN0QWxsUHJvcGVydGllcygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldExpc3QoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9KU09OKCk6IGFueSB7XG4gICAgICAgIGNvbnN0IHByb3BlcnRpZXM6IHN0cmluZ1tdID0gdGhpcy5saXN0QWxsUHJvcGVydGllcygpO1xuICAgICAgICBjb25zdCBkYXRhT2JqZWN0OiBhbnkgPSB7fTtcbiAgICAgICAgcHJvcGVydGllcy5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgICAgaWYgKCh0aGlzKVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRhdGFPYmplY3RbcHJvcGVydHldID0gKHRoaXMpW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXRhT2JqZWN0O1xuICAgIH1cblxuICAgIHB1YmxpYyBmaWVsZHMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0QWxsUHJvcGVydGllcygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyB2YWlsZCgpIHtcbiAgICAgICAgY29uc3QgZXJyb3JzUCA9IHZhbGlkYXRlKHRoaXMsIHsgc2tpcE1pc3NpbmdQcm9wZXJ0aWVzOiB0cnVlIH0pO1xuICAgICAgICBjb25zdCBlcnJvcnMgPSBhd2FpdCBlcnJvcnNQO1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgZXJyb3JzLmZvckVhY2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goXy50cmltU3RhcnQoZXJyLnByb3BlcnR5LCAnXycpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IExpYnNFeGNlcHRpb25zKEdhbWFIdHRwU3RhdHVzQ29kZS5TVEFUVVNfRkFJTCxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAnIDogZGF0YSBmb3JtYXQgZXJyb3IsIGZpZWxkOiAnICsgXy50b1N0cmluZyhtZXNzYWdlcykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZVN5bmMoKSB7XG4gICAgICAgIGNvbnN0IGVycm9ycyA9IHZhbGlkYXRlU3luYyh0aGlzLCB7IHNraXBNaXNzaW5nUHJvcGVydGllczogdHJ1ZSB9KTtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGVycm9ycy5mb3JFYWNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKF8udHJpbVN0YXJ0KGVyci5wcm9wZXJ0eSwgJ18nKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBMaWJzRXhjZXB0aW9ucyhHYW1hSHR0cFN0YXR1c0NvZGUuU1RBVFVTX0ZBSUwsXG4gICAgICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJyA6IGRhdGEgZm9ybWF0IGVycm9yLCBmaWVsZDogJyArIF8udG9TdHJpbmcobWVzc2FnZXMpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==