"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
const joins = require("lodash-joins");
/**
 * 這個class就是幫你處理Data的後處理
 * Large是指超過一千筆資料
 * 普通就是大概100筆左右
 * @export
 * @class DataHelper
 */
class GamaDataHelper {
    static OuterJoin(aData, bData, key) {
        const acc = (a) => key;
        return joins.hashFullOuterJoin(aData, acc, bData, acc);
    }
    static OuterJoinLarge(aData, bData, key) {
        const acc = (a) => key;
        return joins.sortedMergeFullOuterJoin(aData, acc, bData, acc);
    }
    static InnerJoin(aData, bData, key) {
        const acc = (a) => key;
        return joins.hashInnerJoin(aData, acc, bData, acc);
    }
    static InnerJoinLarge(aData, bData, key) {
        const acc = (a) => key;
        return joins.sortedMergeInnerJoin(aData, acc, bData, acc);
    }
    static Existy(x) {
        return x !== undefined;
    }
    static Merge(aData, bData) {
        return _.assign({}, aData, bData);
    }
    static MergeList(...aData) {
        return _.reduce(aData, (sum, next) => {
            return this.Merge(sum, next);
        });
    }
    static Max(aData, key) {
        return _.maxBy(aData, key);
    }
    static Min(aData, key) {
        return _.minBy(aData, key);
    }
    static Sum(aData, key) {
        return _.sumBy(aData, key);
    }
    /**
     * 這個是取出相同的Key沒有的null
     * @param {any[]} aData 左
     * @param {any[]} bData 右
     * @param {string[]} key 相同的key
     * @returns 合併過的陣列
     * @memberof DataHelper
     */
    static RightJoinLarge(aData, bData, key) {
        const acc = (a) => key;
        return joins.sortedMergeRightOuterJoin(aData, acc, bData, acc);
    }
    /**
     * 這個是取出相同的Key沒有的null
     * @param {any[]} aData 左
     * @param {any[]} bData 右
     * @param {string[]} key 相同的key
     * @returns 合併過的陣列
     * @memberof DataHelper
     */
    static LeftJoin(aData, bData, key) {
        const acc = (a) => key;
        return joins.hashLeftOuterJoin(aData, acc, bData, acc);
    }
    /**
     * 這個是取出相同的Key沒有的null
     * @param {any[]} aData 左
     * @param {any[]} bData 右
     * @param {string[]} key 相同的key
     * @returns 合併過的陣列
     * @memberof DataHelper
     */
    static RightJoin(aData, bData, key) {
        const acc = (a) => key;
        return joins.hashRightOuterJoin(aData, acc, bData, acc);
    }
    /**
     * 這個是取出相同的Key沒有的null
     * @param {any[]} aData 左
     * @param {any[]} bData 右
     * @param {string[]} key 相同的key
     * @returns 合併過的陣列
     * @memberof DataHelper
     */
    static LeftJoinLarge(aData, bData, key) {
        const acc = (a) => key;
        return joins.sortedMergeLeftOuterJoin(aData, acc, bData, acc);
    }
    static IntToBoolean(data, fields, toTrue = 1) {
        if (_.isEmpty(data)) {
            return {};
        }
        _.forEach(fields, (key) => {
            if (!_.isUndefined(data[key])) {
                _.toSafeInteger(data[key]) === toTrue ?
                    data[key] = true :
                    data[key] = false;
            }
        });
        return data;
    }
    static IntMoreToBoolean(data, fields, toTrue = 0) {
        if (_.isEmpty(data)) {
            return {};
        }
        _.forEach(fields, (key) => {
            if (!_.isUndefined(data[key])) {
                _.toSafeInteger(data[key]) === toTrue ?
                    data[key] = false :
                    data[key] = true;
            }
        });
        return data;
    }
    static BooleanToInt(data, fields) {
        if (_.isEmpty(data)) {
            return {};
        }
        _.forEach(fields, (key) => {
            if (!_.isUndefined(data[key])) {
                data[key] === true ?
                    data[key] = 1 :
                    data[key] = 0;
            }
        });
        return data;
    }
}
exports.default = GamaDataHelper;
//# sourceMappingURL=data:application/json;base64,